# üöÄ NUDRRS - Emergency Management System Commands
# Quick reference for setup and daily usage

# ========================================
# ‚ö° INSTANT QUICK START (2 Minutes)
# ========================================

# üéØ FOR FIRST TIME SETUP:
# 1. Open Command Prompt/Terminal
# 2. Copy-paste these commands in sequence:

# Navigate to project directory
cd "E:\Internship\NUDRRS"

# Backend Setup (Terminal 1)
cd backend
python -m venv venv
venv\Scripts\activate
pip install -r requirements.txt
python run_server.py

# Frontend Setup (Open NEW Terminal/Command Prompt)
cd "E:\Internship\NUDRRS\frontend"
npm install
npm start

# 3. Open browser and access:
# üåê Frontend: http://localhost:3000
# üîß Admin: http://localhost:8000/admin/ (admin/admin123)
# üìä Dashboard: http://localhost:8000/admin/emergency-dashboard/

# ========================================
# üöÄ DAILY USE (Already Set Up)
# ========================================

# Terminal 1 - Backend (Copy-Paste):
cd "E:\Internship\NUDRRS\backend"
venv\Scripts\activate
python run_server.py

# Terminal 2 - Frontend (Copy-Paste):
cd "E:\Internship\NUDRRS\frontend"
npm start

# ========================================
# üîó ACCESS URLS & ENDPOINTS
# ========================================

# üåê Frontend Application (React)
# http://localhost:3000
# Features: Emergency reporting, live maps, analytics dashboard

# üîß Django Admin Panel
# http://localhost:8000/admin/
# Username: admin
# Password: admin123
# Features: Report management, user management, system configuration

# üìä Emergency Dashboard (Custom Admin)
# http://localhost:8000/admin/emergency-dashboard/
# Features: Real-time statistics, visual analytics, emergency overview

# üì° API Endpoints:
# Base API: http://localhost:8000/api/
# All Reports: http://localhost:8000/api/sos_reports/
# Dashboard Stats: http://localhost:8000/api/sos_reports/dashboard_stats/
# AI Services: http://localhost:8000/api/ai/
# Notifications: http://localhost:8000/api/notifications/
# Resources: http://localhost:8000/api/resources/
# Analytics: http://localhost:8000/api/analytics/

# ========================================
# üõ†Ô∏è DEVELOPMENT COMMANDS
# ========================================

# Backend Commands:
# Stop server: Ctrl+C
# Run migrations: python manage.py migrate
# Create superuser: python manage.py createsuperuser
# Check Django version: python manage.py version
# Collect static files: python manage.py collectstatic
# Django shell: python manage.py shell
# Check migrations: python manage.py showmigrations

# Frontend Commands:
# Stop server: Ctrl+C
# Install new package: npm install package-name
# Build for production: npm run build
# Check React version: npm list react
# Clear cache: npm cache clean --force
# Update packages: npm update

# ========================================
# üóÑÔ∏è DATABASE COMMANDS
# ========================================

# Create new migration:
python manage.py makemigrations

# Apply migrations:
python manage.py migrate

# Reset database (WARNING: Deletes all data):
# Delete: backend\db.sqlite3
# Then run: python manage.py migrate

# Check database status:
python manage.py shell -c "from sos_reports.models import SOSReport; print(f'Reports: {SOSReport.objects.count()}')"

# ========================================
# üö® TROUBLESHOOTING COMMANDS
# ========================================

# If port 8000 is busy:
python manage.py runserver 8001

# If port 3000 is busy:
npm start -- --port 3001

# Clear npm cache:
npm cache clean --force

# Reinstall node_modules:
Remove-Item -Recurse -Force node_modules
npm install

# Clear Python cache:
Get-ChildItem -Recurse -Directory | Where-Object {$_.Name -eq "__pycache__" -and $_.FullName -notlike "*venv*"} | Remove-Item -Recurse -Force

# Reset virtual environment:
Remove-Item -Recurse -Force venv
python -m venv venv
venv\Scripts\activate
pip install -r requirements.txt

# ========================================
# üéØ FEATURES TO TEST
# ========================================

# 1. Create Emergency Report:
# - Go to http://localhost:3000
# - Click "New Emergency Report"
# - Fill form with disaster type, location, description
# - Upload images (optional)
# - Submit report

# 2. View Live Map:
# - Go to Reports tab
# - Click "View on Map"
# - See real-time emergency locations
# - Filter by priority, status, disaster type
# - Auto-refresh every 30 seconds

# 3. Check Analytics:
# - Go to Analytics tab
# - View real-time statistics
# - See disaster type distribution
# - Monitor priority level analysis
# - Track response metrics

# 4. Admin Panel Management:
# - Go to http://localhost:8000/admin/
# - Login with admin/admin123
# - View emergency dashboard
# - Edit reports, manage users
# - Use bulk actions for multiple reports

# 5. Emergency Contacts:
# - Go to Emergency Contacts page
# - View comprehensive emergency contacts
# - Search by location or service type
# - Access contact information

# ========================================
# üîê AUTHENTICATION & PERMISSIONS
# ========================================

# Default Admin Credentials:
# Username: admin
# Password: admin123

# User Permissions:
# - Regular users: Can create reports, upload images
# - Report owners: Can edit their own reports
# - Admins: Can edit all reports, delete reports, manage users

# API Access:
# - No authentication required for basic endpoints
# - All endpoints are publicly accessible for demo
# - Production should implement proper authentication

# ========================================
# üìä SYSTEM STATUS CHECK
# ========================================

# Check if backend is running:
curl http://localhost:8000/api/

# Check if frontend is running:
# Open http://localhost:3000 in browser

# Check database status:
python manage.py shell -c "from sos_reports.models import SOSReport; print(f'Total Reports: {SOSReport.objects.count()}')"

# Check API endpoints:
curl http://localhost:8000/api/sos_reports/
curl http://localhost:8000/api/sos_reports/dashboard_stats/

# ========================================
# üöÄ PRODUCTION DEPLOYMENT
# ========================================

# For production deployment:
# 1. Set DEBUG = False in settings.py
# 2. Configure PostgreSQL database
# 3. Set up environment variables
# 4. Use Gunicorn for Django: pip install gunicorn
# 5. Build React app: npm run build
# 6. Configure static file serving
# 7. Set up HTTPS
# 8. Configure proper CORS policies
# 9. Set up proper authentication
# 10. Use production WSGI server

# Production Commands:
# gunicorn nudrrs.wsgi:application --bind 0.0.0.0:8000
# python manage.py collectstatic --noinput
# python manage.py migrate --noinput

# ========================================
# üîß ADMIN PANEL USAGE
# ========================================

# Main Admin Panel Features:
# - SOS Reports: View, edit, delete emergency reports
# - Report Media: Manage images and files
# - Report Updates: Track status changes
# - Users: Manage user accounts and permissions
# - Groups: Configure permission groups
# - User Profiles: Extended user information

# Emergency Dashboard Features:
# - Real-time statistics
# - Visual analytics with charts
# - Recent activity monitoring
# - Performance metrics
# - AI verification rates
# - Response time analysis

# Bulk Actions Available:
# - Mark as verified
# - Mark as resolved
# - Mark as false alarm
# - Delete selected reports
# - Export data

# ========================================
# üì± MOBILE & RESPONSIVE FEATURES
# ========================================

# The system is fully responsive and works on:
# - Desktop computers
# - Tablets
# - Mobile phones
# - All modern browsers

# Mobile-specific features:
# - Touch-friendly interface
# - Responsive forms
# - Mobile-optimized maps
# - Swipe gestures
# - Mobile camera integration

# ========================================
# ü§ñ AI INTEGRATION FEATURES
# ========================================

# AI-Powered Features:
# - Emergency verification
# - Confidence scoring
# - Description suggestions
# - Location-aware recommendations
# - Priority assessment
# - False alarm detection

# AI Services:
# - Google Gemini integration
# - Natural language processing
# - Image analysis (planned)
# - Pattern recognition
# - Predictive analytics

# ========================================
# üìû SUPPORT & HELP
# ========================================

# If you encounter issues:
# 1. Check console logs for error messages
# 2. Ensure all services are running on correct ports
# 3. Verify database migrations are up to date
# 4. Check network connectivity between frontend and backend
# 5. Restart both servers if needed
# 6. Clear browser cache
# 7. Check firewall settings
# 8. Verify Python and Node.js versions

# Common Issues & Solutions:
# - Port conflicts: Use different ports (8001, 3001)
# - Database errors: Reset database and run migrations
# - CORS errors: Check backend CORS settings
# - Build errors: Clear cache and reinstall dependencies
# - Permission errors: Check file permissions

# ========================================
# üéâ READY TO GO!
# ========================================

# After running the setup commands, you'll have:
# ‚úÖ Backend API: http://localhost:8000
# ‚úÖ Frontend App: http://localhost:3000
# ‚úÖ Admin Panel: http://localhost:8000/admin/
# ‚úÖ Emergency Dashboard: http://localhost:8000/admin/emergency-dashboard/
# ‚úÖ API Documentation: http://localhost:8000/api/

# System Features Available:
# ‚úÖ Emergency Report Creation
# ‚úÖ Live Interactive Maps
# ‚úÖ Real-time Analytics
# ‚úÖ AI-Powered Verification
# ‚úÖ Admin Management Panel
# ‚úÖ Emergency Contacts Directory
# ‚úÖ Image Upload & Management
# ‚úÖ User Permission System
# ‚úÖ Bulk Operations
# ‚úÖ Mobile Responsive Design

# Happy coding! üöÄ